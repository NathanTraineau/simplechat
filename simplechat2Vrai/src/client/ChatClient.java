// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com package client;import java.io.*;import common.ChatIF;import ocsf.client.AbstractClient;/** * This class overrides some of the methods defined in the abstract * superclass in order to give more functionality to the client. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave; * @author Fran&ccedil;ois B&eacute;langer * @version July 2000 */public class ChatClient extends AbstractClient{  //Instance variables **********************************************    /**   * The interface type variable.  It allows the implementation of    * the display method in the client.   */  ChatIF clientUI;   //Constructors ****************************************************    /**   * Constructs an instance of the chat client.   *   * @param host The server to connect to.   * @param port The port number to connect on.   * @param clientUI The interface type variable.   */    public ChatClient(String host, int port, ChatIF clientUI)     throws IOException   {    super(host, port); //Call the superclass constructor    this.clientUI = clientUI;    openConnection();  }    //Instance methods ************************************************      /**	 * This method handles all data coming from the UI            	 *	 * @param message The message from the UI.    	 */	public void handleMessageFromClientUI(String message)	{		try		{			if(message.startsWith("#"))			{				command(message.split(" "));			}			else			{								this.sendToServer(message);			}		}		catch(IOException e)		{			clientUI.display			("Could not send message to server. Terminating client.");			quit();		}	}		 public void command(String[] args) throws IOException	  {	String cmd = args[0].substring(1, args[0].length());	switch(cmd)	{	case "quit":	{		if(this.isConnected())		{			this.sendToServer("#logoff");			this.closeConnection();		}		quit();		break;	}	case "logoff":	{		if(this.isConnected())		{			this.sendToServer("#logoff");			this.closeConnection();		}		else		{			clientUI.display("[console] Error : not connected");		}		break;	}	case "sethost":	{		if(this.isConnected())		{			clientUI.display("[console] Error : cannot set host if client is connected");		}		else		{			this.setHost(args[1]);			if(args.length == 2)			{				clientUI.display("[console] Host has been set to " + args[1]);			}			else			{				clientUI.display("[console] Host has been set to " + args[1] + ", others arguments have been ignored.");			}		}		break;	}	case "setport":	{		if(this.isConnected())		{			clientUI.display("[console] Error : cannot set port if client is connected");		}		else		{			int port = Integer.valueOf(args[1]);			this.setPort(port);			if(args.length != 0)			{				clientUI.display("[console] Port has been set to " + args[1]);			}			else {				clientUI.display("no port given");			}		}		break;	}	case "gethost":	{		clientUI.display("[console] Host : " + this.getHost());		break;	}	case "getport":	{		clientUI.display("[console] Port : " + this.getPort());		break;	}	default:		clientUI.display("[console] Error : unknown command");	}	  }	 	 public void handleMessageFromServer(Object msg) 		{		 //The server may want to disconnect the clients or give them orders			if(msg.toString().startsWith("#"))			{				serverCommand(msg.toString().split(" "));			}			else			{				clientUI.display(msg.toString());			}		}	protected void serverCommand(String[] args)		{			String cmd = args[0].substring(1, args[0].length());			switch(cmd)			{			case "logoff":			{				try {					this.closeConnection();				} catch (IOException e) {					clientUI.display("[console] Error : cannot disconnect from the server");				}				break;			}			}		}      /**   * This method terminates the client.   */  public void quit()  {    try    {      closeConnection();    }    catch(IOException e) {}    System.exit(0);  }}//End of ChatClient class